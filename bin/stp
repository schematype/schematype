#!/usr/bin/env bash

# shellcheck disable=1091,2034,2154

GETOPT_SPEC="\
  $(basename "$0") <options...> [<argument>...]

See 'man stp' for more help.

Common commands:

  stp --compile foo.stp
  stp --compile --print foo.stp > foo.stx
  stp --validate foo.stp foo1.json foo2.yaml
  stp --generate=jsonschema foo.stp > foo.jsonschema

Options:
--
 
c,compile   Compile and link a SchemaType stp file
l,link      Link a SchemaType compiled stc file
g,generate= Generate various kinds of code from an stp
v,validate  Validate data files with an atp file
 
t,type=     Type name to use (default is 'Main')
p,print     Print compile/link output to stdout
L,nolink    Don't link after compile
 
version     Print SchemaType version
h,help      Show the command summary
 
clear-cache Remove old cached assets
 
x,debug     Print lots of debugging info
"

main() (
  setup

  get-opts "$@"

  "cmd:$cmd" "${arguments[@]}"
)

#------------------------------------------------------------------------------
cmd:compile() {
  [[ $# -ge 1 ]] ||
    error "stp --compile requires one or more file arguments"

  temp_file=false
  for stp_file; do
    if [[ $stp_file == '-' ]]; then
      $temp_file &&
        die "Can't use '-' (for stdin) more than once"
      temp_file=true
      stp_file=$(mktemp -d)/-.stp
      cat <&0 > "$stp_file"
      # shellcheck disable=2064
      trap "rm -f '$stp_file'" exit
    fi

    [[ $stp_file == *.stp ]] ||
      error "input file for --compile '$stp_file' doesn't end with '.stp'"

    stc_cache=$(cache-file "$stp_file" stc)
    compile "$stp_file" "$stc_cache"

    if $option_nolink; then
      printer "$stc_cache" "${stp_file%.stp}.stc"
    else
      stx_cache=$(cache-file "$stp_file" stx)
      link "$stc_cache" "$stx_cache"
      printer "$stx_cache" "${stp_file%.stp}.stx"
    fi
  done
}

cmd:validate() {
  [[ $# -ge 2 ]] ||
    error "stp --validate requires one or more file arguments"

  stp_file=$1; shift
  stp --compile --print "$stp_file" >/dev/null
  stx_file=$(cache-file "$stp_file" stx)

  rc=0
  for json_file; do
    if [[ $# -gt 1 ]]; then
      echo "=== Validating file '$json_file':"
    fi
    [[ $json_file == *.json ]] ||
      die "stp validate only works with .json files right now"

    validate "$stx_file" "$json_file" || rc=1
  done

  exit $rc
}

#------------------------------------------------------------------------------
compile() {
  in_file=$1
  cache_file=$2

  [[ -s $cache_file ]] || rm -f "$cache_file"

  if [[ ! -f $cache_file ]]; then
    compiler=$(get-component compiler)
    "$compiler" "$in_file" > "$cache_file"
  fi
}

link() {
  in_file=$1
  cache_file=$2

  [[ -s $cache_file ]] || rm -f "$cache_file"

  if [[ ! -f $cache_file ]]; then
    linker=$(get-component linker)
    "$linker" "$in_file" > "$cache_file"
  fi
}

validate() {
  schema_file=$1
  data_file=$2

  validator=$(get-component validator)

  "$validator" --type="$option_type" "$schema_file" "$data_file"
}

printer() {
  in_file=$1
  out_file=$2

  if $option_print; then
    cat "$in_file"
  else
    cp "$in_file" "$out_file"
  fi
}

#------------------------------------------------------------------------------
get-component() {
  name=$1

  component=bin/schematype-$name
  component_path=$SCHEMATYPE_ROOT/$component

  [[ -f $component_path ]] ||
    run-cmd make -C "$SCHEMATYPE_ROOT" "$component"

  echo "$component_path"
}

cache-file() {
  file=$1
  ext=$2
  sha=$(sha256sum "$file" | cut -d' ' -f1)

  name=$(basename "$file")
  name=${name%.*}

  echo "$SCHEMATYPE_CACHE/$name-$sha.$ext"
}

run-cmd() {
  rc=0
  "$@" &>/dev/null || rc=$?
  if [[ $rc -ne 0 ]]; then
    (set -x; "$@" >&2)
    die "" "Failed to run: '$*'"
  fi
}

#------------------------------------------------------------------------------
setup() {
  if ! [[ $SCHEMATYPE_ROOT ]]; then
    SCHEMATYPE_ROOT=$(cd "$(dirname "$0")/../.." && pwd) || {
      echo "Can't determine 'SCHEMATYPE_ROOT'"
      echo
      echo "See: https://github.com/schematype/schematype/wiki/SchemaType-Setup"
      exit 1
    }
  fi

  [[ -f $SCHEMATYPE_ROOT/stp/lib/stdlib.bash ]] || {
    echo "SchemaType is not properly enabled"
    echo "Did you 'source $SCHEMATYPE_ROOT/.rc'?"
    echo
    echo "See: https://github.com/schematype/schematype/wiki/SchemaType-Setup"
    exit 1
  }

  export SCHEMATYPE_ROOT

  PATH=$SCHEMATYPE_ROOT/stp/lib:$PATH

  source stdlib.bash || {
    echo "Can't source stdlib.bash"
    exit 1
  }

  check-bash-version

  {
    [[ -z ${SCHEMATYPE_BASE-} && -d $PWD/.schematype ]] &&
      SCHEMATYPE_BASE=$PWD/.schematype
    [[ -z ${SCHEMATYPE_BASE-} && -d ~/.schematype ]] &&
      SCHEMATYPE_BASE=~/.schematype
    [[ -z ${SCHEMATYPE_BASE-} && -d $SCHEMATYPE_ROOT/.git ]] &&
      SCHEMATYPE_BASE=$SCHEMATYPE_ROOT
    [[ $SCHEMATYPE_BASE ]] ||
      die "Can't find base directory. Set SCHEMATYPE_BASE."
    export SCHEMATYPE_BASE
  }

  {
    [[ ${SCHEMATYPE_CACHE-} ]] ||
      SCHEMATYPE_CACHE=$SCHEMATYPE_BASE/cache
    [[ -d $SCHEMATYPE_CACHE ]] ||
      mkdir -p "$SCHEMATYPE_CACHE"
    export SCHEMATYPE_CACHE
  }
}

get-opts() {
  source getopt.bash

  GETOPT_ARGS='@arguments' \
    getopt "$@"

  $option_debug && set -x

  $option_compile && cmd=compile
  $option_link && cmd='link'
  $option_validate && cmd=validate

  : "${option_type:=Main}"

  true
}

[[ $0 != "${BASH_SOURCE[0]}" ]] || main "$@"

# vim: set ft=sh lisp:
