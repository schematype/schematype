#!/usr/bin/env testml


*jsc.validate(*json) == *valid


=== Test 1 - contains keyword validation - array with item matching schema (5) is valid
--- valid: true
--- jsc
{"contains": {"minimum": 5}}
--- json
[3, 4, 5]


=== Test 2 - contains keyword validation - array with item matching schema (6) is valid
--- valid: true
--- ^jsc
--- json
[3, 4, 6]


=== Test 3 - contains keyword validation - array with two items matching schema (5, 6) is valid
--- valid: true
--- ^jsc
--- json
[3, 4, 5, 6]


=== Test 4 - contains keyword validation - array without items matching schema is invalid
--- valid: false
--- ^jsc
--- json
[2, 3, 4]


=== Test 5 - contains keyword validation - empty array is invalid
--- valid: false
--- ^jsc
--- json
[]


=== Test 6 - contains keyword validation - not array is valid
--- valid: true
--- ^jsc
--- json
{}


=== Test 7 - contains keyword with const keyword - array with item 5 is valid
--- valid: true
--- jsc
{"contains": {"const": 5}}
--- json
[3, 4, 5]


=== Test 8 - contains keyword with const keyword - array with two items 5 is valid
--- valid: true
--- ^jsc
--- json
[3, 4, 5, 5]


=== Test 9 - contains keyword with const keyword - array without item 5 is invalid
--- valid: false
--- ^jsc
--- json
[1, 2, 3, 4]


=== Test 10 - contains keyword with boolean schema true - any non-empty array is valid
--- valid: true
--- jsc
{"contains": true}
--- json
["foo"]


=== Test 11 - contains keyword with boolean schema true - empty array is invalid
--- valid: false
--- ^jsc
--- json
[]


=== Test 12 - contains keyword with boolean schema false - any non-empty array is invalid
--- valid: false
--- jsc
{"contains": false}
--- json
["foo"]


=== Test 13 - contains keyword with boolean schema false - empty array is invalid
--- valid: false
--- ^jsc
--- json
[]


# vim: ft=testml sw=2:
